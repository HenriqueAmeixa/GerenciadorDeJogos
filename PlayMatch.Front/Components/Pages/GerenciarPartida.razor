@page "/gerenciar-partida"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject GerenciarPartidaService Partida
@using System.Timers

<h3>Partida</h3>

<!-- Time 1 -->
<h4>Time 1</h4>
<ul>
    @foreach (var jogador in Partida.Time1.Jogadores)
    {
        <li>
            @jogador.Apelido - Gols: @jogador.Gols - Assistências: @jogador.Assistencias
            <button @onclick="() => Partida.AdicionarGol(jogador)">+</button>
            <button @onclick="() => Partida.RemoverGol(jogador)">-</button>
            <button @onclick="() => Partida.AdicionarAssistencia(jogador)">+</button>
            <button @onclick="() => Partida.RemoverAssistencia(jogador)">-</button>
        </li>
    }
</ul>

<h3 style="color: red;">@Partida.TempoRestante</h3>
<button @onclick="IniciarOuPausarTimer">@TextoBotaoTimer</button>

<h4>Time 2</h4>
<ul>
    @foreach (var jogador in Partida.Time2.Jogadores)
    {
        <li>
            @jogador.Apelido - Gols: @jogador.Gols - Assistências: @jogador.Assistencias
            <button @onclick="() => Partida.AdicionarGol(jogador)">+</button>
            <button @onclick="() => Partida.RemoverGol(jogador)">-</button>
            <button @onclick="() => Partida.AdicionarAssistencia(jogador)">+</button>
            <button @onclick="() => Partida.RemoverAssistencia(jogador)">-</button>
        </li>
    }
</ul>

<button @onclick="Partida.FinalizarPartida">Finalizar Partida</button>

@code {
    private System.Timers.Timer? timer;
    private bool timerRodando;
    private string TextoBotaoTimer => timerRodando ? "Pausar" : "Iniciar";

    protected override async Task OnInitializedAsync()
    {
        await Partida.CarregarTimesAsync();
    }
    public void IniciarOuPausarTimer()
    {
        if (timer == null)
        {
            timer = new System.Timers.Timer(1000);
            timer.Elapsed += TimerElapsed;
            timer.AutoReset = true;
        }

        if (timerRodando)
        {
            timer.Stop();
            timerRodando = false;
        }
        else
        {
            timer.Start();
            timerRodando = true;
        }
    }

    private async void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (Partida.TempoRestante.TotalSeconds > 0)
        {
            Partida.TempoRestante = Partida.TempoRestante.Subtract(TimeSpan.FromSeconds(1));
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            timer?.Stop();
            timerRodando = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
