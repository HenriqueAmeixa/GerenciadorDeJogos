@page "/gerenciar-partida"
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject GerenciarPartidaService Partida
@using System.Timers

<head>
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="gerenciar-partida.css" />
</head>

<div class="container">
    <h3>Gerenciar Partida</h3>

    <div class="partida-container">
        <!-- Time 1 -->
        <div class="time-card">
            <h4>Time 1</h4>
            <div class="tabela-jogadores">
                <span><i class="fas fa-user"></i></span>
                <span><i class="fas fa-futbol"></i></span>
                <span><i class="fas fa-handshake"></i></span>
                @foreach (var jogador in Partida.Time1.Jogadores)
                {
                    <span class="nome">@jogador.Apelido</span>
                    <div class="estatistica">
                        <button class="btn-acao" @onclick="() => Partida.AdicionarGol(jogador)">
                            <i class="fas fa-plus"></i>
                        </button>
                        <span class="valor">@jogador.Gols</span>
                        <button class="btn-acao" @onclick="() => Partida.RemoverGol(jogador)">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                    <div class="estatistica">
                        <button class="btn-acao" @onclick="() => Partida.AdicionarAssistencia(jogador)">
                            <i class="fas fa-plus"></i>
                        </button>
                        <span class="valor">@jogador.Assistencias</span>
                        <button class="btn-acao" @onclick="() => Partida.RemoverAssistencia(jogador)">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                }
            </div>
        </div>

        <!-- Timer Central -->
        <div class="timer-container">
            <span class="timer">@Partida.TempoRestante</span>
            <button class="btn-timer" @onclick="IniciarOuPausarTimer">
                <i class="fas @(timerRodando ? "fa-pause" : "fa-play")"></i>
            </button>
        </div>

        <!-- Time 2 -->
        <div class="time-card">
            <h4>Time 2</h4>
            <div class="tabela-jogadores">
                <span><i class="fas fa-user"></i></span>
                <span><i class="fas fa-futbol"></i></span>
                <span><i class="fas fa-handshake"></i></span>
                @foreach (var jogador in Partida.Time2.Jogadores)
                {
                    <span class="nome">@jogador.Apelido</span>
                    <div class="estatistica">
                        <button class="btn-acao" @onclick="() => Partida.AdicionarGol(jogador)">
                            <i class="fas fa-plus"></i>
                        </button>
                        <span class="valor">@jogador.Gols</span>
                        <button class="btn-acao" @onclick="() => Partida.RemoverGol(jogador)">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                    <div class="estatistica">
                        <button class="btn-acao" @onclick="() => Partida.AdicionarAssistencia(jogador)">
                            <i class="fas fa-plus"></i>
                        </button>
                        <span class="valor">@jogador.Assistencias</span>
                        <button class="btn-acao" @onclick="() => Partida.RemoverAssistencia(jogador)">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                }
            </div>
        </div>
    </div>

    <button class="btn-finalizar" @onclick="FinalizarPartida">
        <i class="fas fa-flag-checkered"></i> Finalizar Partida
    </button>
</div>




@code {
    private System.Timers.Timer? timer;
    private bool timerRodando;
    private string TextoBotaoTimer => timerRodando ? "Pausar" : "Iniciar";

    protected override async Task OnInitializedAsync()
    {
        await Partida.CarregarTimesAsync();
    }
    public void IniciarOuPausarTimer()
    {
        if (timer == null)
        {
            timer = new System.Timers.Timer(1000);
            timer.Elapsed += TimerElapsed;
            timer.AutoReset = true;
        }

        if (timerRodando)
        {
            timer.Stop();
            timerRodando = false;
        }
        else
        {
            timer.Start();
            timerRodando = true;
        }
    }

    private async void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (Partida.TempoRestante.TotalSeconds > 0)
        {
            Partida.TempoRestante = Partida.TempoRestante.Subtract(TimeSpan.FromSeconds(1));
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            timer?.Stop();
            timerRodando = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task FinalizarPartida()
    {
        PararTimer(); 
        await Partida.FinalizarPartidaAsync(); 
    }
    private void PararTimer()
    {
        if (timer != null)
        {
            timer.Stop();
            timer.Elapsed -= TimerElapsed;
            timer.Dispose();
            timer = null;
        }
        timerRodando = false;
    }

}
