@page "/Partidas"
@inject NavigationManager Navigation
@inject PartidaService PartidaService
@inject IJSRuntime JS

<head>
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
</head>

<PageTitle>Gerenciar Partida</PageTitle>

<div class="page-container">
    <h1>Partidas</h1>

    <div class="container-btn">
        <button class="btn-iniciar" @onclick="IrParaSelecao">
            <i class="fas fa-play"></i> Nova Partida
        </button>
    </div>

    <div class="controls">
        <button class="btn-icon" @onclick="CopiarPartidas">
            <i class="fas fa-copy"></i>
        </button>
    </div>

    <!-- Lista de Partidas Anteriores -->
    <div class="scroll-view">
        @foreach (var partida in PartidasAnteriores)
        {
            var vencedorTime1 = partida.PlacarTime1 > partida.PlacarTime2;
            var empate = partida.PlacarTime1 == partida.PlacarTime2;

            <div class="partida-item">
                <!-- Botão de excluir no canto superior direito -->
                <button class="btn-excluir" @onclick="() => ExcluirPartidaAsync(partida.Id)">
                    <i class="fas fa-trash"></i>
                </button>

                <div class="time-container @(vencedorTime1 ? "vencedor" : (empate ? "empate" : ""))">
                    <h4>Time 1</h4>
                    <div class="tabela-jogadores">
                        <span><i class="fas fa-user"></i></span>
                        <span><i class="fas fa-futbol"></i></span>
                        <span><i class="fas fa-handshake"></i></span>
                        @foreach (var jogador in partida.Time1.Jogadores)
                        {
                            <span>@jogador.Nome</span>
                            <span>@jogador.Gols</span>
                            <span>@jogador.Assistencias</span>
                        }
                    </div>
                    @if (vencedorTime1)
                    {
                        <span class="vencedor-icon">✔</span>
                    }
                </div>

                <!-- Timer no centro -->
                <div class="timer-container">
                    <div class="tempo">@partida.TempoDeJogoFormatado</div>
                </div>

                <div class="time-container @(!vencedorTime1 && !empate ? "vencedor" : (empate ? "empate" : ""))">
                    <h4>Time 2</h4>
                    <div class="tabela-jogadores">
                        <span><i class="fas fa-user"></i></span>
                        <span><i class="fas fa-futbol"></i></span>
                        <span><i class="fas fa-handshake"></i></span>
                        @foreach (var jogador in partida.Time2.Jogadores)
                        {
                            <span>@jogador.Nome</span>
                            <span>@jogador.Gols</span>
                            <span>@jogador.Assistencias</span>
                        }
                    </div>
                    @if (!vencedorTime1 && !empate)
                    {
                        <span class="vencedor-icon">✔</span>
                    }

                </div>
            </div>
        }
    </div>
</div>



@code {
    private List<Partida> PartidasAnteriores = new List<Partida>();

    protected override async Task OnInitializedAsync()
    {
        PartidasAnteriores = await PartidaService.GetPartidasAsync();
    }

    private void IrParaSelecao()
    {
        Navigation.NavigateTo("/selecao-jogadores");
    }

    private async Task CopiarPartidas()
    {
        var texto = GerarTextoPartidas();
        await Clipboard.Default.SetTextAsync(texto);
    }

    private string GerarTextoPartidas()
    {
        var sb = new System.Text.StringBuilder();

        int jogoNumero = 1;
        foreach (var partida in PartidasAnteriores)
        {
            bool vencedorTime1 = partida.PlacarTime1 > partida.PlacarTime2;
            bool empate = partida.PlacarTime1 == partida.PlacarTime2;

            string time1 = $"{string.Join(", ", partida.Time1.Jogadores.Select(j => $"{j.Apelido} {(j.Gols > 0 ? j.Gols + "G" : "")} {(j.Assistencias > 0 ? j.Assistencias + "A" : "")}"))} {(vencedorTime1 ? "V" : "")}";

            string time2 = $"{string.Join(", ", partida.Time2.Jogadores.Select(j => $"{j.Apelido} {(j.Gols > 0 ? j.Gols + "G" : "")} {(j.Assistencias > 0 ? j.Assistencias + "A" : "")}"))} {(!vencedorTime1 && !empate ? "V" : "")}";

            sb.AppendLine($"Jogo {jogoNumero}");
            sb.AppendLine(time1.Trim());
            sb.AppendLine("X");
            sb.AppendLine(time2.Trim());
            sb.AppendLine();

            jogoNumero++;
        }

        return sb.ToString();
    }


    private async Task ExcluirPartidaAsync(int partidaId)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir esta partida?");
        if (confirm)
        {
            await PartidaService.ExcluirPartidaAsync(partidaId);
            PartidasAnteriores.RemoveAll(p => p.Id == partidaId);
        }
    }
}
