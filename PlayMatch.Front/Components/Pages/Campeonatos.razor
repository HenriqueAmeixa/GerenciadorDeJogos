@page "/campeonatos"
@inject CampeonatoService CampeonatoService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<head>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet" />
</head>

<PageTitle>Campeonatos</PageTitle>

<div class="page-container">
    <h1>🏆 Campeonatos</h1>

    <!-- Botão criar campeonato -->
    <div class="container-btn">
        <button class="btn-iniciar" @onclick="MostrarFormulario">
            <i class="fas fa-plus"></i> Novo Campeonato
        </button>
    </div>

    @if (mostrarFormulario)
    {
            <div class="formulario-novo mt-3">
                <input class="form-control" placeholder="Nome do campeonato" @bind="novoCampeonato.Nome" />
                <input type="date" class="form-control mt-2" @bind="dataInicioString" />
                <div class="d-flex gap-2 mt-2">
                    <button class="btn btn-success" @onclick="CriarCampeonato"><i class="fas fa-save"></i> Salvar</button>
                    <button class="btn btn-secondary" @onclick="() => mostrarFormulario = false">Cancelar</button>
                </div>
            </div>
    }

    <div class="scroll-view mt-4">
        @if (campeonatos.Count == 0)
        {
                <p>Nenhum campeonato cadastrado ainda.</p>
        }
        else
        {
            @foreach (var campeonato in campeonatos)
            {
                        <div class="partida-item d-flex justify-content-between align-items-center">
                            <!-- Título -->
                            <div>
                                <strong>@campeonato.Nome</strong><br />
                                <span class="text-muted small">Início: @campeonato.DataInicio.ToShortDateString()</span>
                            </div>

                            <!-- Ações -->
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => VerRodadas(campeonato.Id)">
                                    <i class="fas fa-list-ol"></i> Rodadas
                                </button>

                                <button class="btn-excluir" @onclick="() => ExcluirCampeonatoAsync(campeonato.Id)">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
            }
        }
    </div>
</div>

@code {
    private List<Models.Campeonato> campeonatos = new();
    private Models.Campeonato novoCampeonato = new();
    private DateTime dataInicioString = DateTime.Now;
    private bool mostrarFormulario = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarCampeonatos();
    }

    private async Task CarregarCampeonatos()
    {
        campeonatos = await CampeonatoService.ObterTodosAsync();
    }

    private void MostrarFormulario()
    {
        novoCampeonato = new Models.Campeonato();
        dataInicioString = DateTime.Now;
        mostrarFormulario = true;
    }

    private async Task CriarCampeonato()
    {
        if (string.IsNullOrWhiteSpace(novoCampeonato.Nome))
            return;

        novoCampeonato.DataInicio = dataInicioString;
        await CampeonatoService.InserirAsync(novoCampeonato);

        mostrarFormulario = false;
        await CarregarCampeonatos();
    }

    private async Task ExcluirCampeonatoAsync(int id)
    {
        var confirm = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir este campeonato?");
        if (confirm)
        {
            await CampeonatoService.RemoverAsync(id);
            campeonatos.RemoveAll(c => c.Id == id);
        }
    }

    private void VerRodadas(int campeonatoId)
    {
        Navigation.NavigateTo($"/campeonatos/{campeonatoId}/rodadas");
    }
}
